schema {
  query: Query
  mutation: Mutation
}

type WalletSchema @key(fields: "id") {
  id: ID!
  userId: ID!
  balance: Float!
  defaultCurrency: FiatCurrency!
  transactions: [TransactionSchema!]!
  createdAt: String!
}

"""Fiat currency"""
enum FiatCurrency {
  USD
  CAD
  VND
}

type TransactionSchema @key(fields: "id") {
  id: ID!
  fromWalletId: String!
  toWalletId: String!
  amount: Float!
  paidAmount: Float!
  amountLessFee: Float!
  networkFee: Float!
  transactionFee: Float!
  status: TransactionStatus!
  description: String!
  method: TransactionMethod!
  currency: FiatCurrency!
  btcExchangeRate: Float!
  btcAmount: Float!
  createdAt: String!
  settledAt: String
}

"""Transaction status"""
enum TransactionStatus {
  UNPAID
  PENDING
  PAID
  EXPIRED
  PARTIALLY_PAID
}

"""Transaction method"""
enum TransactionMethod {
  ON_CHAIN
  LIGHTNING
  IN_APP
}

type Query {
  getWallet(data: GetWalletDto!): GetWallet
  getMyWallet: GetMeWallet
  getWallets(Pagination: PaginationInputType): GetWallets
  getMyWalletTransactions(Pagination: PaginationInputType): GetMyWalletTransactions
  getTransactions(Pagination: PaginationInputType): GetTransactions
  getTransaction(data: GetTransactionDto!): GetTransaction
  getPaymentRequest(data: GetPaymentRequestDto!): GetPaymentRequest
  getPaymentRequests(Pagination: PaginationInputType): GetPaymentRequests
  getMyPaymentRequests(Pagination: PaginationInputType): GetMyPaymentRequests
}

type GetWallet {
  success: Boolean!
  errors: [ApiError!]
  data: WalletSchema
}

type ApiError {
  path: String!
  message: String!
}

input GetWalletDto {
  walletId: String = ""
  userId: String = ""
}

type GetMeWallet {
  success: Boolean!
  errors: [ApiError!]
  data: WalletSchema
}

type GetWallets {
  success: Boolean!
  errors: [ApiError!]
  data: [WalletSchema!]!
}

input PaginationInputType {
  limit: Int = 0
  skip: Int = 0
}

type GetMyWalletTransactions {
  success: Boolean!
  errors: [ApiError!]
  data: [TransactionSchema!]!
}

type GetTransactions {
  success: Boolean!
  errors: [ApiError!]
  data: [TransactionSchema!]!
}

type GetTransaction {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionSchema
}

input GetTransactionDto {
  transactionId: String!
}

type GetPaymentRequest {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionRequestSchema
}

type TransactionRequestSchema @key(fields: "id") {
  id: ID!
  transaction: TransactionSchema!
  status: TransactionRequestStatus!
  requestFrom: String!
  requestTo: String!
  createdAt: String!
  expiredAt: String!
  settledAt: String
}

"""Transaction request status"""
enum TransactionRequestStatus {
  UNKNOWN
  PENDING
  CANCELED
  CONFIRMED
  REJECTED
}

input GetPaymentRequestDto {
  paymentRequestId: String!
}

type GetPaymentRequests {
  success: Boolean!
  errors: [ApiError!]
  data: [TransactionRequestSchema!]!
}

type GetMyPaymentRequests {
  success: Boolean!
  errors: [ApiError!]
  data: [TransactionRequestSchema!]!
}

type Mutation {
  sendInAppPayment(data: SendInAppPaymentDto!): SendInAppPayment
  sendLightningPayment(data: SendLightningPaymentDto!): SendLightningPayment
  sendPaymentRequest(data: SendRequestPaymentDto!): SendPaymentRequest
  sendOnchainPayment(data: SendOnchainPaymentDto!): SendOnchainPayment
  respondPaymentRequest(data: RespondPaymentRequestDto!): RespondPaymentRequest
  cancelPaymentRequest(data: CancelPaymentRequestDto!): CancelPaymentRequest
  checkTransactionStatus(data: CheckTransactionStatusDto!): CheckTransactionStatus
}

type SendInAppPayment {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionSchema
}

input SendInAppPaymentDto {
  walletId: String
  amount: Float!
  currency: String!
  method: String!
  description: String!
}

type SendLightningPayment {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionSchema
}

input SendLightningPaymentDto {
  paymentRequest: String!
}

type SendPaymentRequest {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionRequestSchema
}

input SendRequestPaymentDto {
  walletId: String!
  amount: Float!
  currency: String!
  method: String!
  description: String!
}

type SendOnchainPayment {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionSchema
}

input SendOnchainPaymentDto {
  """Bitcoin Address"""
  address: String!
  """Bitcoin Amount"""
  amount: Float!
  description: String!
}

type RespondPaymentRequest {
  success: Boolean!
  errors: [ApiError!]
  data: Boolean
}

input RespondPaymentRequestDto {
  paymentRequestId: String!
  confirmed: Boolean!
}

type CancelPaymentRequest {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input CancelPaymentRequestDto {
  paymentRequestId: String!
}

type CheckTransactionStatus {
  success: Boolean!
  errors: [ApiError!]
  data: CheckTransactionStatusResponse
}

type CheckTransactionStatusResponse {
  transactionId: String!
  status: TransactionStatus!
  paidAmount: Float!
  method: String!
}

input CheckTransactionStatusDto {
  transactionId: String!
}
