schema {
  query: Query
  mutation: Mutation
}
type WalletSchema @key(fields: "id") {
  id: ID!
  balance: Float!
  defaultCurrency: FiatCurrency!
  transactions: [TransactionSchema!]!
  createdAt: String!
}
"""Fiat currency"""
enum FiatCurrency {
  USD
  CAD
  VND
}
type TransactionSchema @key(fields: "id") {
  id: ID!
  fromWalletId: String!
  toWalletId: String!
  amount: Float!
  networkFee: Float!
  transactionFee: Float!
  status: TransactionStatus!
  description: String!
  method: TransactionMethod!
  currency: FiatCurrency!
  btcExchangeRate: Float!
  btcAmount: Float!
  createdAt: String!
}
"""Transaction status"""
enum TransactionStatus {
  UNKNOWN
  PENDING
  DONE
  EXPIRED
}
"""Transaction method"""
enum TransactionMethod {
  ON_CHAIN
  LIGHTNING
}
type Query {
  getWallet(data: GetWalletDto!): GetWallet
  getMeWallet: GetMeWallet
  getWallets(Pagination: PaginationInputType): GetWallets
}
type GetWallet {
  success: Boolean!
  errors: [ApiError!]
  data: WalletSchema
}
type ApiError {
  path: String!
  message: String!
}
input GetWalletDto {
  userId: String!
}
type GetMeWallet {
  success: Boolean!
  errors: [ApiError!]
  data: WalletSchema
}
type GetWallets {
  success: Boolean!
  errors: [ApiError!]
  data: [WalletSchema!]!
}
input PaginationInputType {
  limit: Int
  skip: Int
}
type Mutation {
  sendTransaction(data: SendTransactionDto!): SendTransaction
}
type SendTransaction {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionResponse
}
type TransactionResponse {
  transaction: TransactionSchema!
}
input SendTransactionDto {
  walletId: String!
  amount: Float!
  currency: String!
  method: String!
  description: String!
}