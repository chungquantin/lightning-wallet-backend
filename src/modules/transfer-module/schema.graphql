schema {
  query: Query
}
type WalletSchema @key(fields: "id") {
  id: ID!
  balance: Float!
  defaultCurrency: FiatCurrency!
}
"""Fiat currency"""
enum FiatCurrency {
  USD
  CAD
  VND
  AUD
  MXN
}
type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  getWallet(data: GetWalletDto!): GetWallet
  getMeWallet: GetMeWallet
}
union _Entity = WalletSchema
scalar _Any
type _Service {
  """The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied"""
  sdl: String
}
type GetWallet {
  success: Boolean!
  errors: [ApiError!]
  data: WalletSchema
}
type ApiError {
  path: String!
  message: String!
}
input GetWalletDto {
  userId: String!
}
type GetMeWallet {
  success: Boolean!
  errors: [ApiError!]
  data: WalletSchema
}
directive @key(fields: String!) on OBJECT | INTERFACE
directive @extends on OBJECT | INTERFACE
directive @external on OBJECT | FIELD_DEFINITION
directive @requires(fields: String!) on FIELD_DEFINITION
directive @provides(fields: String!) on FIELD_DEFINITION