schema {
  query: Query
  mutation: Mutation
}
type WalletSchema @key(fields: "id") {
  id: ID!
  userId: ID!
  balance: Float!
  defaultCurrency: FiatCurrency!
  transactions: [TransactionSchema!]!
  createdAt: String!
}
"""Fiat currency"""
enum FiatCurrency {
  USD
  CAD
  VND
}
type TransactionSchema @key(fields: "id") {
  id: ID!
  fromWalletId: String!
  toWalletId: String!
  amount: Float!
  networkFee: Float!
  transactionFee: Float!
  status: TransactionStatus!
  description: String!
  method: TransactionMethod!
  currency: FiatCurrency!
  btcExchangeRate: Float!
  btcAmount: Float!
  createdAt: String!
}
"""Transaction status"""
enum TransactionStatus {
  UNKNOWN
  PENDING
  DONE
  EXPIRED
}
"""Transaction method"""
enum TransactionMethod {
  ON_CHAIN
  LIGHTNING
}
type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  getWallet(data: GetWalletDto!): GetWallet
  getMyWallet: GetMeWallet
  getWallets(Pagination: PaginationInputType): GetWallets
  getMyWalletTransactions(Pagination: PaginationInputType): GetMyWalletTransactions
  getTransactions(Pagination: PaginationInputType): GetTransactions
  getTransaction(data: GetTransactionDto!): GetTransaction
  getPaymentRequest(data: GetPaymentRequestDto!): GetPaymentRequest
  getPaymentRequests(Pagination: PaginationInputType): GetPaymentRequests
  getMyPaymentRequests(Pagination: PaginationInputType): GetMyPaymentRequests
}
union _Entity = WalletSchema | TransactionSchema | TransactionRequestSchema
scalar _Any
type _Service {
  """The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied"""
  sdl: String
}
type GetWallet {
  success: Boolean!
  errors: [ApiError!]
  data: WalletSchema
}
type ApiError {
  path: String!
  message: String!
}
input GetWalletDto {
  walletId: String
  userId: String
}
type GetMeWallet {
  success: Boolean!
  errors: [ApiError!]
  data: WalletSchema
}
type GetWallets {
  success: Boolean!
  errors: [ApiError!]
  data: [WalletSchema!]!
}
input PaginationInputType {
  limit: Int
  skip: Int
}
type GetMyWalletTransactions {
  success: Boolean!
  errors: [ApiError!]
  data: [TransactionSchema!]!
}
type GetTransactions {
  success: Boolean!
  errors: [ApiError!]
  data: [TransactionSchema!]!
}
type GetTransaction {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionSchema
}
input GetTransactionDto {
  transactionId: String!
}
type GetPaymentRequest {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionRequestSchema
}
type TransactionRequestSchema @key(fields: "id") {
  id: ID!
  transaction: TransactionSchema!
  status: TransactionRequestStatus!
  requestFrom: String!
  requestTo: String!
  createdAt: String!
  expiredAt: String!
}
"""Transaction request status"""
enum TransactionRequestStatus {
  UNKNOWN
  PENDING
  CANCELED
  CONFIRMED
  REJECTED
}
input GetPaymentRequestDto {
  paymentRequestId: String!
}
type GetPaymentRequests {
  success: Boolean!
  errors: [ApiError!]
  data: [TransactionRequestSchema!]!
}
type GetMyPaymentRequests {
  success: Boolean!
  errors: [ApiError!]
  data: [TransactionRequestSchema!]!
}
type Mutation {
  sendInAppPayment(data: SendInAppPaymentDto!): SendInAppPayment
  sendOutAppLightningPayment(data: SendOutAppLightningPaymentDto!): SendOutAppLightningPayment
  sendInAppLightningPayment(data: SendInAppLightningPaymentDto!): SendInAppLightningPayment
  sendPaymentRequest(data: SendRequestPaymentDto!): SendPaymentRequest
  respondPaymentRequest(data: RespondPaymentRequestDto!): RespondPaymentRequest
  cancelPaymentRequest(data: CancelPaymentRequestDto!): CancelPaymentRequest
}
type SendInAppPayment {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionSchema
}
input SendInAppPaymentDto {
  walletId: String
  amount: Float!
  currency: String!
  method: String!
  description: String!
}
type SendOutAppLightningPayment {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionSchema
}
input SendOutAppLightningPaymentDto {
  paymentRequest: String!
  description: String!
}
type SendInAppLightningPayment {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionSchema
}
input SendInAppLightningPaymentDto {
  paymentRequest: String!
  walletId: String!
  description: String!
}
type SendPaymentRequest {
  success: Boolean!
  errors: [ApiError!]
  data: TransactionRequestSchema
}
input SendRequestPaymentDto {
  walletId: String!
  amount: Float!
  currency: String!
  method: String!
  description: String!
}
type RespondPaymentRequest {
  success: Boolean!
  errors: [ApiError!]
  data: Boolean
}
input RespondPaymentRequestDto {
  paymentRequestId: String!
  confirmed: Boolean!
}
type CancelPaymentRequest {
  success: Boolean!
  errors: [ApiError!]
  data: String
}
input CancelPaymentRequestDto {
  paymentRequestId: String!
}
directive @key(fields: String!) on OBJECT | INTERFACE
directive @extends on OBJECT | INTERFACE
directive @external on OBJECT | FIELD_DEFINITION
directive @requires(fields: String!) on FIELD_DEFINITION
directive @provides(fields: String!) on FIELD_DEFINITION