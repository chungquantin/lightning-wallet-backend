schema {
  query: Query
  mutation: Mutation
}

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type BankAccountBalanceSchema @key(fields: "id") {
  id: ID!
  availableBalance: Float
  currentBalance: Float
  limitBalance: Float
  isoCurrencyCode: String
  unofficialCurrencyCode: String
}

type BankAccountAchSchema @key(fields: "id") {
  id: ID!
  routingNumber: String!
  account: String!
  wire_routing: String!
}

type BankAccountSchema @key(fields: "id") {
  id: ID!
  userId: String!
  accountId: String!
  institution: InstitutionSchema!
  balance: BankAccountBalanceSchema!
  ach: BankAccountAchSchema!
  name: String!
  officialName: String
  subType: String
  type: BankAccountType!
  addedAt: String!
}

"""Values of the Bank Account Type field"""
enum BankAccountType {
  Investment
  Credit
  Depository
  Loan
  Brokerage
  Other
}

type InstitutionSchema @key(fields: "institutionId") {
  id: ID!
  institutionId: String!
  institutionName: String!
  institutionLogo: String
  primaryColor: String
  websiteUrl: String
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  getBankAccount(data: GetBankAccountDto!): GetBankAccount
  getBankAccounts: GetBankAccounts
  getMyBankAccounts: GetMyBankAccounts
  getBankTransfers(data: GetBankTransfersDto!): GetBankTransfers
  getBankTransfer(data: GetBankTransferDto!): GetBankTransfer
  getInstitutions: GetInstitutions
  getInstitution(data: GetInstitutionDto!): GetInstitutionById
  exchangePublicToken(data: ExchangeTokenDto!): PlaidExchangePublicToken
}

union _Entity = BankAccountBalanceSchema | BankAccountAchSchema | BankAccountSchema | InstitutionSchema

scalar _Any

type _Service {
  """The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied"""
  sdl: String
}

type GetBankAccount {
  success: Boolean!
  errors: [ApiError!]
  data: BankAccountSchema
}

type ApiError {
  path: String!
  message: String!
}

input GetBankAccountDto {
  bankAccountId: String!
}

type GetBankAccounts {
  success: Boolean!
  errors: [ApiError!]
  data: [BankAccountSchema!]!
}

type GetMyBankAccounts {
  success: Boolean!
  errors: [ApiError!]
  data: [BankAccountSchema!]!
}

type GetBankTransfers {
  success: Boolean!
  errors: [ApiError!]
  data: [BankTransfer!]!
}

type BankTransfer {
  account_id: String!
  ach_class: String!
  amount: String!
  cancellable: Boolean!
  created: String!
  customTag: String!
  description: String!
  direction: String!
  failure_reason: String!
  id: String!
  currency: String!
  network: String!
  originationAccountId: String!
  status: String!
  type: String!
  legalName: String!
}

input GetBankTransfersDto {
  startDate: String!
  endDate: String!
  count: Float!
  offset: Float!
  originationAccountId: String!
  direction: String!
}

type GetBankTransfer {
  success: Boolean!
  errors: [ApiError!]
  data: BankTransfer
}

input GetBankTransferDto {
  bankTransferId: String!
}

type GetInstitutions {
  success: Boolean!
  errors: [ApiError!]
  data: [InstitutionSchema!]!
}

type GetInstitutionById {
  success: Boolean!
  errors: [ApiError!]
  data: InstitutionSchema
}

input GetInstitutionDto {
  institutionId: String!
}

type PlaidExchangePublicToken {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input ExchangeTokenDto {
  publicToken: String!
}

type Mutation {
  deposit(data: WithdrawDto!): Deposit
  connectBankAccount(data: ConnectBankAccountDto!): ConnectBankAccount
  connectDebitCard: ConnectDebitCard
  deleteBankAccount(data: DeleteBankAccountDto!): DeleteBankAccount
  createLinkToken: PlaidCreateLinkToken
}

type Deposit {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input WithdrawDto {
  """The user's account number."""
  accountNumber: String!
  """The user's routing number."""
  routingNumber: String!
  """The type of the bank account (checking or savings)."""
  accountType: String!
  accountName: String!
  amount: Float!
  currency: String!
}

type ConnectBankAccount {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input ConnectBankAccountDto {
  """account id [Plaid]"""
  accountId: String!
  publicToken: String!
  institutionId: String!
}

type ConnectDebitCard {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

type DeleteBankAccount {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input DeleteBankAccountDto {
  bankAccountId: String!
}

type PlaidCreateLinkToken {
  success: Boolean!
  errors: [ApiError!]
  data: LinkTokenCreateResponseImpl
}

type LinkTokenCreateResponseImpl {
  link_token: String!
  request_id: String!
  expiration: String!
}
