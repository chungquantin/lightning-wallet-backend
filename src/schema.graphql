type Query {
  me: Me
  getUser(data: GetUserDto!): GetUser
  getUsers: GetUsers
}

type Me {
  success: Boolean!
  errors: [ApiError!]
  data: UserSchema
}

type ApiError {
  path: String!
  message: String!
}

type UserSchema {
  id: ID!
  email: String!
  avatar: String!
  emailVerified: Boolean!
  twoFactorVerified: Boolean!
  balance: Float!
  phoneNumberVerified: Boolean!
  phoneNumber: String!
  password: String!
  firstName: String!
  lastName: String!
  defaultCurrency: FiatCurrency!
  forgotPasswordLock: Boolean!
  name: String!
}

"""Fiat currency"""
enum FiatCurrency {
  USD
  CAD
  VND
  AUD
  MXN
}

type GetUser {
  success: Boolean!
  errors: [ApiError!]
  data: UserSchema
}

input GetUserDto {
  userId: String!
}

type GetUsers {
  success: Boolean!
  errors: [ApiError!]
  data: [UserSchema!]!
}

type Mutation {
  login(data: LoginDto!): Login
  logout: Logout
  register(data: RegisterDto!): Register
  sendForgotPasswordEmail(data: SendForgotPasswordDto!): ForgotPassword
  forgotPasswordChange(data: ForgotPasswordChangeDto!): SendForgotPassword
}

type Login {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input LoginDto {
  email: String!
  password: String!
}

type Logout {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

type Register {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input RegisterDto {
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  password: String!
  phoneNumber: String!
  avatar: String!
}

type ForgotPassword {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input SendForgotPasswordDto {
  email: String!
}

type SendForgotPassword {
  success: Boolean!
  errors: [ApiError!]
  data: String
}

input ForgotPasswordChangeDto {
  key: String!
  newPassword: String!
}
