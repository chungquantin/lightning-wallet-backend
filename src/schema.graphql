schema @core(feature: "https://specs.apollo.dev/core/v0.1") @core(feature: "https://specs.apollo.dev/join/v0.1") {
  query: Query
  mutation: Mutation
}
type AddNewContact {
  data: String
  errors: [ApiError!]
  success: Boolean!
}
input AddNewContactDto {
  userId: String!
}
type ApiError {
  message: String!
  path: String!
}
"""Fiat currency"""
enum FiatCurrency {
  CAD
  USD
  VND
}
type ForgotPassword {
  data: String
  errors: [ApiError!]
  success: Boolean!
}
input ForgotPasswordChangeDto {
  key: String!
  newPassword: String!
}
type GetMeWallet {
  data: WalletSchema
  errors: [ApiError!]
  success: Boolean!
}
type GetUser {
  data: UserSchema
  errors: [ApiError!]
  success: Boolean!
}
input GetUserDto {
  userId: String!
}
type GetUsers {
  data: [UserSchema!]!
  errors: [ApiError!]
  success: Boolean!
}
type GetWallet {
  data: WalletSchema
  errors: [ApiError!]
  success: Boolean!
}
input GetWalletDto {
  userId: String!
}
type GetWallets {
  data: [WalletSchema!]!
  errors: [ApiError!]
  success: Boolean!
}
type HelloWorld {
  data: String
  errors: [ApiError!]
  success: Boolean!
}
type LightningTransaction {
  amount: Float!
  blockHash: String!
  fees: Float!
  hash: String!
  timeStamp: Float!
}
type LndGetTransactions {
  data: [LightningTransaction!]!
  errors: [ApiError!]
  success: Boolean!
}
type Login {
  data: TokenResponse
  errors: [ApiError!]
  success: Boolean!
}
input LoginDto {
  email: String!
  password: String!
}
type Logout {
  data: String
  errors: [ApiError!]
  success: Boolean!
}
type Me {
  data: UserSchema
  errors: [ApiError!]
  success: Boolean!
}
type Mutation {
  addNewContact(data: AddNewContactDto!): AddNewContact @join__field(graph: ACCOUNT_MODULE)
  forgotPasswordChange(data: ForgotPasswordChangeDto!): SendForgotPassword @join__field(graph: ACCOUNT_MODULE)
  login(data: LoginDto!): Login @join__field(graph: ACCOUNT_MODULE)
  logout: Logout @join__field(graph: ACCOUNT_MODULE)
  register(data: RegisterDto!): Register @join__field(graph: ACCOUNT_MODULE)
  sendForgotPasswordEmail(data: SendForgotPasswordDto!): ForgotPassword @join__field(graph: ACCOUNT_MODULE)
  sendTransaction(data: SendTransactionDto!): SendTransaction @join__field(graph: TRANSFER_MODULE)
}
input PaginationInputType {
  limit: Int
  skip: Int
}
type Query {
  getMeWallet: GetMeWallet @join__field(graph: TRANSFER_MODULE)
  getUser(data: GetUserDto!): GetUser @join__field(graph: ACCOUNT_MODULE)
  getUsers(Pagination: PaginationInputType): GetUsers @join__field(graph: ACCOUNT_MODULE)
  getWallet(data: GetWalletDto!): GetWallet @join__field(graph: TRANSFER_MODULE)
  getWallets(Pagination: PaginationInputType): GetWallets @join__field(graph: TRANSFER_MODULE)
  helloWorld: HelloWorld @join__field(graph: BANK_MODULE)
  lndGetTransactions(Pagination: PaginationInputType): LndGetTransactions @join__field(graph: LND_MODULE)
  me: Me @join__field(graph: ACCOUNT_MODULE)
}
type Register {
  data: UserSchema
  errors: [ApiError!]
  success: Boolean!
}
input RegisterDto {
  avatar: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
}
type SendForgotPassword {
  data: String
  errors: [ApiError!]
  success: Boolean!
}
input SendForgotPasswordDto {
  email: String!
}
type SendTransaction {
  data: TransactionResponse
  errors: [ApiError!]
  success: Boolean!
}
input SendTransactionDto {
  amount: Float!
  currency: String!
  description: String!
  method: String!
  walletId: String!
}
type TokenResponse {
  accessToken: String!
  refreshToken: String!
}
"""Transaction method"""
enum TransactionMethod {
  LIGHTNING
  ON_CHAIN
}
type TransactionResponse {
  transaction: TransactionSchema!
}
type TransactionSchema @join__owner(graph: TRANSFER_MODULE) @join__type(graph: TRANSFER_MODULE, key: "id") {
  amount: Float! @join__field(graph: TRANSFER_MODULE)
  btcAmount: Float! @join__field(graph: TRANSFER_MODULE)
  btcExchangeRate: Float! @join__field(graph: TRANSFER_MODULE)
  createdAt: String! @join__field(graph: TRANSFER_MODULE)
  currency: FiatCurrency! @join__field(graph: TRANSFER_MODULE)
  description: String! @join__field(graph: TRANSFER_MODULE)
  fromWalletId: String! @join__field(graph: TRANSFER_MODULE)
  id: ID! @join__field(graph: TRANSFER_MODULE)
  method: TransactionMethod! @join__field(graph: TRANSFER_MODULE)
  networkFee: Float! @join__field(graph: TRANSFER_MODULE)
  status: TransactionStatus! @join__field(graph: TRANSFER_MODULE)
  toWalletId: String! @join__field(graph: TRANSFER_MODULE)
  transactionFee: Float! @join__field(graph: TRANSFER_MODULE)
}
"""Transaction status"""
enum TransactionStatus {
  DONE
  EXPIRED
  PENDING
  UNKNOWN
}
type UserSchema @join__owner(graph: ACCOUNT_MODULE) @join__type(graph: ACCOUNT_MODULE, key: "id") {
  avatar: String! @join__field(graph: ACCOUNT_MODULE)
  contacts: [UserSchema!]! @join__field(graph: ACCOUNT_MODULE)
  createdAt: String! @join__field(graph: ACCOUNT_MODULE)
  email: String! @join__field(graph: ACCOUNT_MODULE)
  emailVerified: Boolean! @join__field(graph: ACCOUNT_MODULE)
  firstName: String! @join__field(graph: ACCOUNT_MODULE)
  forgotPasswordLock: Boolean! @join__field(graph: ACCOUNT_MODULE)
  id: ID! @join__field(graph: ACCOUNT_MODULE)
  lastName: String! @join__field(graph: ACCOUNT_MODULE)
  name: String! @join__field(graph: ACCOUNT_MODULE)
  phoneNumber: String! @join__field(graph: ACCOUNT_MODULE)
  phoneNumberVerified: Boolean! @join__field(graph: ACCOUNT_MODULE)
  twoFactorVerified: Boolean! @join__field(graph: ACCOUNT_MODULE)
}
type WalletSchema @join__owner(graph: TRANSFER_MODULE) @join__type(graph: TRANSFER_MODULE, key: "id") {
  balance: Float! @join__field(graph: TRANSFER_MODULE)
  createdAt: String! @join__field(graph: TRANSFER_MODULE)
  defaultCurrency: FiatCurrency! @join__field(graph: TRANSFER_MODULE)
  id: ID! @join__field(graph: TRANSFER_MODULE)
  transactions: [TransactionSchema!]! @join__field(graph: TRANSFER_MODULE)
}